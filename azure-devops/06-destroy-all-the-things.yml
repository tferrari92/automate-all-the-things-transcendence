name: destroy-all-the-things

trigger: none

parameters:
  - name: DELETED_KEY_FROM_DOMAIN
    displayName: Have you deleted the DNSSEC key from the domain registrar? If you haven't the terraform destroy will fail. Type ¨yes¨ to proceed.
    type: string

variables:
  - group: aws-keys
  - name: AWS_SERVICE_CONNECTION_NAME
    value: aws
  - name: AWS_REGION
    value: AATT_AWS_REGION # This value was modified by the initial-setup python script
  - name: APP_NAME
    value: AATT_APP_NAME # This value was modified by the initial-setup python script
  - name: DOMAIN
    value: AATT_DOMAIN # This value was modified by the initial-setup python script

pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created

jobs:
- job: DeleteK8SResources
  condition: eq('${{ parameters.DELETED_KEY_FROM_DOMAIN }}', 'yes')
  displayName: 'Delete Kubernetes Resources'
  steps:

  - task: HelmInstaller@0
    inputs:
      displayName: Install helm
      helmVersion: '3.11.2'
      installKubectl: true

  - task: AWSCLI@1
    displayName: 'Update KubeConfig'
    inputs:
      awsCredentials: $(AWS_SERVICE_CONNECTION_NAME)
      regionName: '$(AWS_REGION)' 
      awsCommand: 'eks'
      awsSubCommand: 'update-kubeconfig'
      awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

  - script: | 
      mkdir ~/.aws
      echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
      echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
    displayName: 'Configure AWS Profile'

  # There's a specific order we need to follow for things to go smoothly, read the "echo's" to understand.
  - script: | 
      echo "Before deleting all applications we eliminate the App of Apps."
      echo "If we don't, it will try to re-deploy the other applications along with their ingresses."
      echo "This would automatically create untracked AWS Application Load Balancers and mess up the terraform destroy."
      echo "########################################################################"
      kubectl delete -n argocd applications.argoproj.io argocd-apps

      echo " "
      echo " "
      echo "We also to remove the finalizers from the Kiali CR for deletion to be successful. It's a known issue:"
      echo "https://kiali.io/docs/installation/installation-guide/install-with-helm/#known-problem-uninstall-hangs-unable-to-delete-the-kiali-cr"
      echo "########################################################################"
      kubectl patch kiali kiali -n service-mesh -p '{"metadata":{"finalizers": []}}' --type=merge

      echo " "
      echo " "
      echo "We delete all apps except External-DNS. Why?"
      echo "We need External-DNS to notice there are no ingress objects anymore so it can go and remove the DNS records belonging to those deleted ingresses."
      echo "If these records don't get removed, the terraform destroy will fail."
      echo "It won't be able to destroy the Hosted Zone since there are still leftover records in it."
      echo "########################################################################"
      kubectl get applications.argoproj.io -n argocd -o name | grep -v "external-dns" | xargs kubectl delete -n argocd

      echo " "
      echo " "
      echo "We uninstall ArgoCD. Deleting its application doesn't really remove it."
      echo "########################################################################"
      helm uninstall -n argocd argocd
      
      echo " "
      echo " "
      echo "Finally, we can remove external-dns."
      echo "We will give it a minute first so it can notice the abscence of ingress objects and deletes the corrsponding DNS records."
      echo "Every how long External-DNS checks for changes can be specified in its values-custom.yaml."
      echo "########################################################################"
      sleep 60
      kubectl delete namespace dns
    displayName: 'Delete Applications & ArgoCD'


  # Before deleting all infra we make sure there are no existing ingresses so the terraform destroy isn't messed up by the existance of untracked AWS Application Load Balancers
  - script: | 
        kubectl delete ingress --all --all-namespaces
    displayName: 'Delete Ingresses'

  # We also delete all EBS volumes created through Persistent Volumes
  - script: | 
        kubectl delete persistentvolumeclaims --all --all-namespaces
        kubectl delete persistentvolumes --all --all-namespaces
    displayName: 'Delete Persisten Volumes'


- job: DeleteAWSInfrastructure
  displayName: 'Delete AWS Infrastructure'
  dependsOn: DeleteK8SResources
  steps:
  # # This step it only to display the pipeline as "Failed" if parameter DELETED_KEY_FROM_DOMAIN is "No". Without this, the pipeline will result as successful which may lead to confusion.
  # - ${{ if eq(parameters.DELETED_KEY_FROM_DOMAIN, 'No') }}:
  #   - script: echo "DELETED_KEY_FROM_DOMAIN is set to No, failing the pipeline." && exit 1
  #     displayName: Fail the pipeline if DELETED_KEY_FROM_DOMAIN is No

  - script: | 
      mkdir ~/.aws
      echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
      echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
    displayName: 'Configure AWS Profile'

  # - script: |
  #     echo "Waiting for 15 minutes..."
  #     echo "Why?"
  #     echo "Well, after deleting the DNSSEC key from the domain registrar we need to wait the TTL of the DS record before disabling DNSSEC signing."
  #     echo "The default TTL of the DS record is 900 seconds (15 minutes)."
  #     echo "Assuming you've just deleted the DNSSEC key from the domain registrar, we'll wait the default TTL before running the 'aws route53 disable-hosted-zone-dnssec' command."
  #     echo "Go grab yourself a cup of coffee..."
  #     sleep 900
  #   displayName: 'Wait 15 Minutes'

  # - script: | 
  #     ZONE_ID=$(aws route53 list-hosted-zones-by-name --output json --dns-name "$(DOMAIN)" |  jq -r '.HostedZones[0].Id' | cut -d'/' -f3)
  #     aws route53 disable-hosted-zone-dnssec --region us-east-1 --hosted-zone-id $ZONE_ID
  #   displayName: 'Disable DNSSEC signing on hosted zone'

  - script: | 
      ZONE_ID=$(aws route53 list-hosted-zones-by-name --output json --dns-name "$(DOMAIN)" |  jq -r '.HostedZones[0].Id' | cut -d'/' -f3)
      
      # Disabling DNSSEC signing will fail if we've just deleted the DNSSEC key from the domain, so we'll keep trying every one minute.
      while true; do
        set +e
        aws route53 disable-hosted-zone-dnssec --region us-east-1 --hosted-zone-id $ZONE_ID
        result=$?
        set -e
        if [ $result -ne 0 ]; then
          echo "Attempt failed. Waiting for 1 minute before retrying..."
          sleep 60
        else
          echo "DNSSEC signing disabled successfully."
          break
        fi
      done
    displayName: 'Disable DNSSEC signing on hosted zone'


  - task: TerraformInstaller@1
    displayName: Install terraform
    inputs:
      terraformVersion: '1.4.6'

  - task: TerraformCLI@1
    displayName: 'Terraform Init'
    inputs:
      command: init
      workingDirectory: 'terraform/aws'
      backendType: aws
      backendServiceAws: $(AWS_SERVICE_CONNECTION_NAME)
      providerServiceAws: $(AWS_SERVICE_CONNECTION_NAME)
      providerAwsRegion: $(AWS_REGION)

  - task: TerraformCLI@1
    displayName: 'Terraform Destroy AWS Infra'
    inputs:
      command: destroy
      workingDirectory: 'terraform/aws'
      providerServiceAws: $(AWS_SERVICE_CONNECTION_NAME)
      providerAwsRegion: $(AWS_REGION) 
    continueOnError: true
