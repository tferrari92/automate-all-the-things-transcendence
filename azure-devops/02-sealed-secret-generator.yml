name: sealed-secret-generator

trigger: none

parameters:
  - name: DEV_REDIS_SECRET
    displayName: 'Introduce the password for the DEV ElastiCache DB'
    type: string
  - name: STAGE_REDIS_SECRET
    displayName: 'Introduce the password for the STAGE ElastiCache DB'
    type: string
  - name: PROD_REDIS_SECRET
    displayName: 'Introduce the password for the PROD ElastiCache DB'
    type: string


variables:
  - group: aws-keys
  - name: AWS_SERVICE_CONNECTION_NAME
    value: aws
  - name: AWS_REGION
    value: AATT_AWS_REGION  # This value was modified by the initial-setup python script
  - name: APP_NAME
    value: AATT_APP_NAME # This value was modified by the initial-setup python script
    

pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created


steps:
# # In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
- checkout: self
  persistCredentials: true

- script: | 
    KUBESEAL_VERSION='0.24.0'
    wget "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION:?}/kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz"
    tar -xvzf kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz kubeseal
    sudo install -m 755 kubeseal /usr/local/bin/kubeseal
  displayName: 'Install Kubeseal CLI tool'

- script: | 
    mkdir ~/.aws
    echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
    echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
  displayName: 'Configure AWS Profile'

- task: AWSCLI@1
  displayName: 'Update KubeConfig'
  inputs:
    awsCredentials: $(AWS_SERVICE_CONNECTION_NAME)
    regionName: '$(AWS_REGION)' 
    awsCommand: 'eks'
    awsSubCommand: 'update-kubeconfig'
    awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

- script: | 
    kubectl create secret generic redis-secret --dry-run=client -n $(APP_NAME)-dev --from-literal=REDIS_PASS=${{ parameters.DEV_REDIS_SECRET }} -o yaml > dev-secret.yaml
    kubectl create secret generic redis-secret --dry-run=client -n $(APP_NAME)-stage --from-literal=REDIS_PASS=${{ parameters.STAGE_REDIS_SECRET }} -o yaml > stage-secret.yaml
    kubectl create secret generic redis-secret --dry-run=client -n $(APP_NAME)-prod --from-literal=REDIS_PASS=${{ parameters.PROD_REDIS_SECRET }} -o yaml > prod-secret.yaml
  displayName: 'Create secret manifests to be sealed'

- script: | 
    kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < dev-secret.yaml > dev-sealed-secret.json 
    kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < stage-secret.yaml > stage-sealed-secret.json 
    kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < prod-secret.yaml > prod-sealed-secret.json 
  displayName: 'Encrypt the json secrets with Kubeseal'

- script: | 
    cat dev-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > dev-encrypted-pass.txt
    cat stage-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > stage-encrypted-pass.txt
    cat prod-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > prod-encrypted-pass.txt
  displayName: 'Get the value of REDIS_PASS'

- script: |
    sed -i "s|redis_pass:.*|redis_pass: $(cat dev-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm/my-app/backend/environments/values-dev.yaml
    sed -i "s|redis_pass:.*|redis_pass: $(cat stage-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm/my-app/backend/environments/values-stage.yaml
    sed -i "s|redis_pass:.*|redis_pass: $(cat prod-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm/my-app/backend/environments/values-prod.yaml 
  displayName: 'Set the encrypted value in the values of each environment'

- script: |
    git pull origin main
    git config --global user.email "AzureDevOps@SealedSecretPipeline.com"
    git config --global user.name "Azure DevOps - Sealed Secret Pipeline"
    git checkout -b main
    git add helm/my-app/backend/environments/values-dev.yaml    
    git add helm/my-app/backend/environments/values-stage.yaml    
    git add helm/my-app/backend/environments/values-prod.yaml    
    git commit -m "Sealed secrets created by Azure DevOps"
    git push --set-upstream origin main
  displayName: 'Push changes to GitHub'
