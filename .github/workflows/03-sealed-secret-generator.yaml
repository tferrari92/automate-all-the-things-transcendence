name: 03-Sealed secret generator

on:
  ##################################
  # CODE FOR TESTING PURPOSES ONLY
  # workflow_run:
  #   workflows: ["02-Deploy ArgoCD"]
  #   types:
  #     - completed
  ##################################
  workflow_dispatch:
    inputs:
      GITHUB_TOKEN:
        description: 'Introduce your GitHub token for Backstage'
        required: true
      AUTH_GITHUB_CLIENT_ID:
        description: 'Introduce your GitHub Auth Client ID for Backstage'
        required: true
      AUTH_GITHUB_CLIENT_SECRET:
        description: 'Introduce your GitHub Auth Client Secret for Backstage'
        required: true
      DEV_REDIS_SECRET:
        description: 'Introduce the password for the DEV ElastiCache DB'
        required: true
        default: 'automate-all-the-things-dev'
      STAGE_REDIS_SECRET:
        description: 'Introduce the password for the STAGE ElastiCache DB'
        required: true
        default: 'automate-all-the-things-stage'
      PROD_REDIS_SECRET:
        description: 'Introduce the password for the PROD ElastiCache DB'
        required: true
        default: 'automate-all-the-things-prod'
      GRAFANA_ADMIN_PASS: 
        description: 'Introduce the password for the Grafana admin user. Default is "automate-all-the-things"'
        required: true
        default: 'automate-all-the-things'
  

env:
  AWS_REGION: AATT_AWS_REGION # This value was modified by the initial-setup python script
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PROJECT: AATT_PROJECT_NAME # This value was modified by the initial-setup python script
  SYSTEM: meme-web
  ####################################################################
  # CODE FOR TESTING PURPOSES ONLY
  # GITHUB_TOKEN: ${{ secrets.XGITHUB_TOKEN }}
  # AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
  # AUTH_GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}
  # DEV_REDIS_SECRET: automate-all-the-things-dev
  # STAGE_REDIS_SECRET: automate-all-the-things-stage
  # PROD_REDIS_SECRET: automate-all-the-things-prod
  # GRAFANA_ADMIN_PASS: automate-all-the-things
  ####################################################################


jobs:
  generate-sealed-secrets:
    runs-on: ubuntu-latest
    ########################################################################################################
    # CODE FOR TESTING PURPOSES ONLY
    # Run only if the previous workflow was successful or if its a manual trigger
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    ########################################################################################################
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Kubeseal CLI tool
        run: | 
          KUBESEAL_VERSION='0.24.0'
          wget "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION:?}/kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz"
          tar -xvzf kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz kubeseal
          sudo install -m 755 kubeseal /usr/local/bin/kubeseal

      - name: Configure kubeconfig
        run: | 
          aws eks --region $AWS_REGION update-kubeconfig --name $PROJECT-cluster 

      - name: Get ArgoCD auth token
        run: | 
          export ARGOCD_URL=$(kubectl get ingress -n argocd argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "ARGOCD_URL=$ARGOCD_URL"

          export ARGOCD_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ARGOCD_ADMIN_PASSWORD=$ARGOCD_ADMIN_PASSWORD"

          export ARGOCD_ADMIN_BEARER_TOKEN=$(curl http://$ARGOCD_URL/api/v1/session -d '{"username":"admin","password":"'"$ARGOCD_ADMIN_PASSWORD"'"}' | grep -Po '"token":\s*"\K([^"]*)')
          echo "ARGOCD_ADMIN_BEARER_TOKEN=$ARGOCD_ADMIN_BEARER_TOKEN"

          export ARGOCD_AUTH_TOKEN_RAW=$(curl -X POST http://$ARGOCD_URL/api/v1/account/backstage-service-account/token \
                                              -H "Content-Type: application/json" \
                                              -H "Authorization: Bearer $ARGOCD_ADMIN_BEARER_TOKEN" \
                                              -d '{
                                                "expiresIn": 2592000,
                                                "id": "'"$GITHUB_RUN_NUMBER"'",
                                                "name": "backstage-token"
                                              }')
          echo "ARGOCD_AUTH_TOKEN_RAW=$ARGOCD_AUTH_TOKEN_RAW"
          
          export ARGOCD_AUTH_TOKEN="argocd.token=$(echo $ARGOCD_AUTH_TOKEN_RAW | grep -Po '"token":\s*"\K([^"]*)')"
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"
          echo " "
          echo "ARGOCD_AUTH_TOKEN=$ARGOCD_AUTH_TOKEN"
          echo " "
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"
          echo "$ARGOCD_AUTH_TOKEN" > argocd-auth-token.txt

      - name: Get Grafana auth token
        run: | 
          export GRAFANA_URL=$(kubectl get ingress -n observability grafana -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "GRAFANA_URL=$GRAFANA_URL"

          export GRAFANA_CREDS=admin:$GRAFANA_ADMIN_PASS
          export GRAFANA_CREDS_BASE64=$(echo -n $GRAFANA_CREDS | base64)

          curl -X POST "http://$GRAFANA_URL/api/serviceaccounts" \
              -H 'Accept: application/json' \
              -H 'Content-Type: application/json' \
              -H "Authorization: Basic $GRAFANA_CREDS_BASE64" \
              -d '{
                    "name": "backstage",
                    "role": "Viewer",
                    "isDisabled": false
                  }'
                  
          export GRAFANA_TOKEN=$(curl -X POST "http://$GRAFANA_URL/api/serviceaccounts/2/tokens" \
                                      -H 'Accept: application/json' \
                                      -H 'Content-Type: application/json' \
                                      -H "Authorization: Basic $GRAFANA_CREDS_BASE64" \
                                      -d '{
                                            "name": "'"backstage-token-$GITHUB_RUN_NUMBER"'"
                                          }' | grep -Po '"key":"\K.*?(?=")')
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"
          echo " "
          echo "GRAFANA_TOKEN=$GRAFANA_TOKEN"
          echo " "
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"
          echo "$GRAFANA_TOKEN" > grafana-token.txt

      - name: Create AWS credentials file
        run: | 
          echo -e "[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID\naws_secret_access_key = $AWS_SECRET_ACCESS_KEY" > aws-credentials.txt
     
    #################################
    # CODE FOR TESTING PURPOSES ONLY
              # --from-literal=GITHUB_TOKEN="$GITHUB_TOKEN" \
              # --from-literal=AUTH_GITHUB_CLIENT_ID="$AUTH_GITHUB_CLIENT_ID" \
              # --from-literal=AUTH_GITHUB_CLIENT_SECRET="$AUTH_GITHUB_CLIENT_SECRET" \
    #################################

     
      - name: Create secret manifests to be sealed
        run: | 
          # AWS credentials
          kubectl create secret generic aws-secret --dry-run=client -n crossplane-system --from-file=creds=./aws-credentials.txt -o yaml > aws-credentials-secret.yaml

          # GitHub secrets
          kubectl create secret generic github-secret --dry-run=client -n backstage \
              --from-literal=GITHUB_TOKEN="${{ github.event.inputs.GITHUB_TOKEN }}" \
              --from-literal=AUTH_GITHUB_CLIENT_ID="${{ github.event.inputs.AUTH_GITHUB_CLIENT_ID }}" \
              --from-literal=AUTH_GITHUB_CLIENT_SECRET="${{ github.event.inputs.AUTH_GITHUB_CLIENT_SECRET }}" \
              -o yaml > github-secret.yaml
          
          # ArgoCD auth token
          kubectl create secret generic argocd-auth-token --dry-run=client -n backstage --from-literal=ARGOCD_AUTH_TOKEN="$(cat argocd-auth-token.txt)" -o yaml > argocd-auth-token-secret.yaml
         
          # Grafana auth token
          kubectl create secret generic grafana-token --dry-run=client -n backstage --from-literal=GRAFANA_TOKEN="$(cat grafana-token.txt)" -o yaml > grafana-token-secret.yaml

          # Database passwords
          kubectl create secret generic redis-secret --dry-run=client -n $SYSTEM-dev --from-literal=REDIS_PASS="${{ github.event.inputs.DEV_REDIS_SECRET }}" -o yaml > dev-secret.yaml
          kubectl create secret generic redis-secret --dry-run=client -n $SYSTEM-stage --from-literal=REDIS_PASS="${{ github.event.inputs.STAGE_REDIS_SECRET }}" -o yaml > stage-secret.yaml
          kubectl create secret generic redis-secret --dry-run=client -n $SYSTEM-prod --from-literal=REDIS_PASS="${{ github.event.inputs.PROD_REDIS_SECRET }}" -o yaml > prod-secret.yaml

      - name: Encrypt the json secrets with Kubeseal
        run: | 
          # AWS credentials
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < aws-credentials-secret.yaml > aws-credentials-sealed-secret.json

          # GitHub secrets
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < github-secret.yaml > github-sealed-secret.json

          # ArgoCD auth token
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < argocd-auth-token-secret.yaml > argocd-auth-token-sealed-secret.json
          
          # Grafana auth token
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < grafana-token-secret.yaml > grafana-token-sealed-secret.json

          # Database passwords
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < dev-secret.yaml > dev-sealed-secret.json 
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < stage-secret.yaml > stage-sealed-secret.json 
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < prod-secret.yaml > prod-sealed-secret.json 

      - name: Get the encrypted values
        run: | 
          # AWS credentials
          cat  aws-credentials-sealed-secret.json | jq -r '.spec.encryptedData.creds' > aws-credentials-encrypted.txt

          # GitHub secrets
          cat github-sealed-secret.json | jq -r '.spec.encryptedData.GITHUB_TOKEN' > github-token-encrypted.txt
          cat github-sealed-secret.json | jq -r '.spec.encryptedData.AUTH_GITHUB_CLIENT_ID' > github-auth-client-id-encrypted.txt
          cat github-sealed-secret.json | jq -r '.spec.encryptedData.AUTH_GITHUB_CLIENT_SECRET' > github-auth-client-secret-encrypted.txt

          # ArgoCD auth token
          cat argocd-auth-token-sealed-secret.json | jq -r '.spec.encryptedData.ARGOCD_AUTH_TOKEN' > argocd-auth-token-encrypted.txt

          # Grafana auth token
          cat grafana-token-sealed-secret.json | jq -r '.spec.encryptedData.GRAFANA_TOKEN' > grafana-token-encrypted.txt

          # Database passwords
          cat dev-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > dev-encrypted-pass.txt
          cat stage-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > stage-encrypted-pass.txt
          cat prod-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > prod-encrypted-pass.txt

      - name: Set the encrypted value in the values of each environment
        run: | 
          # AWS credentials
          sed -i "s|awsCredentials:.*|awsCredentials: $(cat aws-credentials-encrypted.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/infra/crossplane/values-custom.yaml

          # GitHub creds
          sed -i "s|githubToken:.*|githubToken: $(cat github-token-encrypted.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/infra/backstage/values-custom.yaml
          sed -i "s|githubAuthClientId:.*|githubAuthClientId: $(cat github-auth-client-id-encrypted.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/infra/backstage/values-custom.yaml
          sed -i "s|githubAuthClientSecret:.*|githubAuthClientSecret: $(cat github-auth-client-secret-encrypted.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/infra/backstage/values-custom.yaml

          # ArgoCD auth token
          sed -i "s|argocdAuthToken:.*|argocdAuthToken: $(cat argocd-auth-token-encrypted.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/infra/backstage/values-custom.yaml

          # Grafana auth token
          sed -i "s|grafanaToken:.*|grafanaToken: $(cat grafana-token-encrypted.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/infra/backstage/values-custom.yaml

          # Database passwords
          sed -i "s|redisPass:.*|redisPass: $(cat dev-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/systems/$SYSTEM/backend/environments/values-dev.yaml
          sed -i "s|redisPass:.*|redisPass: $(cat stage-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/systems/$SYSTEM/backend/environments/values-stage.yaml
          sed -i "s|redisPass:.*|redisPass: $(cat prod-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm-charts/systems/$SYSTEM/backend/environments/values-prod.yaml 

      - name: Commit changes to GitHub
        run: |
          git pull
          git config --global user.email "GitHubActions@SealedSecretWorkflow.com"
          git config --global user.name "GitHub Actions - Sealed Secret Workflow"
          git add helm-charts/infra/crossplane/values-custom.yaml    
          git add helm-charts/infra/backstage/values-custom.yaml    
          git add helm-charts/systems/$SYSTEM/backend/environments/values-dev.yaml    
          git add helm-charts/systems/$SYSTEM/backend/environments/values-stage.yaml    
          git add helm-charts/systems/$SYSTEM/backend/environments/values-prod.yaml 
          git commit -m "Sealed secrets created by GitHub Actions"
          git push