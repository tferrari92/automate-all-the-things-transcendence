name: 04-Destroy infrastructure

on:
  workflow_dispatch:

env:
  AWS_REGION: AATT_AWS_REGION # This value was modified by the initial-setup python script
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PROJECT: AATT_PROJECT_NAME # This value was modified by the initial-setup python script

jobs:
  destroy-k8s-resources:
    runs-on: ubuntu-latest

    steps:
      # - name: Install kubectl & helm
      #   uses: yokawasa/action-setup-kube-tools@v0.11.1
      #   with:
      #     kubectl: '1.28.2'
      #     helm: '3.11.2'

      - name: Configure kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $PROJECT-cluster

      # Before deleting all Ingresses we eliminate ArgoCD because if we don't, it will re-deploy the Ingresses, automatically creating untracked AWS Application Load Balancers, which would mess with the terraform destroy  
      - name: Delete applications & ArgoCD
        run: | 
          # First we delete the ArgoCD App of Apps application so that it doesn't try to re-deploy applications while they are being deleted. 
          kubectl delete -n argocd applications.argoproj.io argocd-app-of-apps

          # We also need to remove the finalizers from the Kiali CR for deletion to be successful, it's a known issue (https://kiali.io/docs/installation/installation-guide/install-with-helm/#known-problem-uninstall-hangs-unable-to-delete-the-kiali-cr)
          kubectl patch kiali kiali -n service-mesh -p '{"metadata":{"finalizers": []}}' --type=merge
          
          # Now we can delete all ArgoCD applications
          kubectl delete -n argocd applications.argoproj.io --all

          ###################################################################################################################
          ####################### ESTO NO HACE FALTA PORQUE CON LA SOLUCION DE LAS SUB-APPLICATIONS DE CROSSPLANE PARA PROVIDERS Y PROVIDERCONFIGS,
          ####################### LA APPLICATION DE CROSSPLANE NO PUEDE SER BORRADA HASTA QUE ELLAS NO MUERAN, Y PROVIDERCONFIGS NO PUEDE MORIR 
          ####################### HASTA QUE NO MUERAN TODOS LOS MANAGED RESOURCES
          ####################### # The aws-secret with the credentials for the Crossplane ProviderConfig will be deleted with the Crossplane application.
          ####################### # We need to create it again for the ProviderConfig to be be able to connect to AWS and successfully delete all managed resources.
          ####################### echo -e "[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID\naws_secret_access_key = $AWS_SECRET_ACCESS_KEY" > aws-credentials.txt
          ####################### COMMAND="kubectl create secret generic aws-secret -n crossplane-system --from-file=creds=./aws-credentials.txt"
          ####################### until $COMMAND; do
          #######################   echo "Command failed. Retrying in 5 seconds..."
          #######################   sleep 5
          ####################### done
          #########################################################################################
        
          # Now we can uninstall ArgoCD
          helm uninstall -n argocd argocd

      # Before deleting all infra we make sure there are no existing ingresses so the terraform destroy isn't messed up by the existance of untracked AWS Application Load Balancers
      - name: Delete ingresses
        run: | 
          kubectl delete ingress --all --all-namespaces

      # We also delete all EBS volumes created through Persistent Volumes
      - name: 'Delete persistent volumes'
        run: | 
          kubectl delete persistentvolumeclaims --all --all-namespaces
          kubectl delete persistentvolumes --all --all-namespaces

  destroy-infra:
    runs-on: ubuntu-latest
    needs: destroy-k8s-resources
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.4.6"

      - name: Terraform init
        run: terraform init
        working-directory: terraform/aws

      - name: Terraform destroy
        run: terraform destroy -auto-approve
        working-directory: terraform/aws
        continue-on-error: true
